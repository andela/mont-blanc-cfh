/**
 * Module dependencies.
 */
const mongoose = require('mongoose'),
  bcrypt = require('bcryptjs'),
  User = mongoose.model('User');
const avatars = require('./avatars').all();

  /**
 * Auth callback
 */
exports.authCallback = (req, res, next) => {
  res.redirect('/chooseavatars');
};

/**
 * Show login form
 */
exports.signin = (req, res) => {
  if (!req.user) {
    res.redirect('/#!/signin?error=invalid');
  } else {
    res.redirect('/#!/app');
  }
};

/**
 * Show sign up form
 */
exports.signup = (req, res)  => {
  if (!req.user) {
    res.redirect('/#!/signup');
  } else {
    res.redirect('/#!/app');
  }
};

/**
 * Logout
 */
exports.signout = (req, res) => {
  req.logout();
  res.redirect('/');
};

/**
 * Session
 */
exports.session = (req, res) => {
  res.redirect('/');
};

/** 
 * Check avatar - Confirm if the user who logged in via passport
 * already has an avatar. If they don't have one, redirect them
 * to our Choose an Avatar page.
 */
exports.checkAvatar = (req, res) => {
  if (req.user && req.user._id) {
    User.findOne({
      _id: req.user._id
    })
    .exec(function(err, user) {
      if (user.avatar !== undefined) {
        res.redirect('/#!/');
      } else {
        res.redirect('/#!/choose-avatar');
      }
    });
  } else {
    // If user doesn't even exist, redirect to /
    res.redirect('/');
  }

};
 
/**
 * Generate token for authentication
 */

/**
 * Create user
 */
exports.create = (req, res, next) => {
  const { body: {name, password, email} } = req;
    if (name && password && email) {
      User.findOne({
        email
      }).exec((err,existingUser) => { 
        if (!existingUser) {
          const user =  new User({
            name,
            password,
            email
          });
          // Switch the user's avatar index to an actual avatar url
          user.avatar = avatars[user.avatar];
          user.provider = 'local';
          user.save((err) => {
            if (err) {
              return res.status(400).send({
                errors: err.errors.hashed_password.type,
                message: 'Failed'
              });
            }
            return res.status(201).send({
              message: 'Successfully signed up',
              token: user.generateJwt(),
              user
            });
          });
        } else {
          return res.status(409).send({
            message: 'Email already exists'
          });
        }
      });
    } else {
      return res.status(400).send({
        message: 'Details are required'
      });
    }
  };


exports.login = function(req, res) {
  if (req.body.password && req.body.email) {
    User
    .findOne({
      email: req.body.email
    })
    .exec(function(err,existingUser) {
      if (!existingUser) {
        return res
        .status(404)
        .send({
          message: 'user does not exist'
        });
      }
      if (!bcrypt.compareSync(req.body.password, existingUser.hashed_password)) {
        return res
        .status(401)
        .send({
          message: 'Incorrect password/email'
        });
      }
      console.log(existingUser)
      return res
      .status(200)
      .send({
        token: existingUser.generateJwt(),
        message: 'You have successfully logged in'
      });
    });
  } else {
    return res
    .status(400)
    .send({
      message: 'All fields are required'
    });
  }
};
/**
 * Assign avatar to user
 */
exports.avatars = (req, res) => {
  // Update the current user's profile to include the avatar choice they've made
  if (req.user && req.user._id && req.body.avatar !== undefined &&
    /\d/.test(req.body.avatar) && avatars[req.body.avatar]) {
    User.findOne({
      _id: req.user._id
    })
    .exec(function(err, user) {
      user.avatar = avatars[req.body.avatar];
      user.save();
    });
  }
  return res.redirect('/#!/app');
};

exports.addDonation = (req, res) => {
  if (req.body && req.user && req.user._id) {
    // Verify that the object contains crowdrise data
    if (req.body.amount && req.body.crowdrise_donation_id && req.body.donor_name) {
      User.findOne({
        _id: req.user._id
      })
      .exec(function(err, user) {
        // Confirm that this object hasn't already been entered
        var duplicate = false;
        for (var i = 0; i < user.donations.length; i++ ) {
          if (user.donations[i].crowdrise_donation_id === req.body.crowdrise_donation_id) {
            duplicate = true;
          }
        }
        if (!duplicate) {
          console.log('Validated donation');
          user.donations.push(req.body);
          user.premium = 1;
          user.save();
        }
      });
    }
  }
  res.send();
};

/**
 *  Show profile
 */
exports.show = (req, res) => {
  var user = req.profile;

  res.render('users/show', {
    title: user.name,
    user: user
  });
};

/**
 * Send User
 */
exports.me = (req, res) => {
  res.jsonp(req.user || null);
};

/**
 * Find user by id
 */
exports.user = (req, res, next, id) => {
  User
    .findOne({
      _id: id
    })
    .exec(function(err, user) {
      if (err) return next(err);
      if (!user) return next(new Error('Failed to load User ' + id));
      req.profile = user;
      next();
    });
};

